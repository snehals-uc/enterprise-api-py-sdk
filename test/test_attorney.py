# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/developers/enterpriseapi/api/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from unicourt.models.attorney import Attorney

class TestAttorney(unittest.TestCase):
    """Attorney unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Attorney:
        """Test Attorney
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Attorney`
        """
        model = Attorney()
        if include_optional:
            return Attorney(
                object = 'Attorney',
                attorney_id = '01234567891011121314151617',
                name = '0',
                name_prefix = '',
                first_name = '',
                middle_name = '',
                last_name = '',
                name_suffix = '',
                contact = unicourt.models.contact.Contact(
                    object = 'Contact', 
                    address_array = [
                        unicourt.models.address.Address(
                            object = 'Address', 
                            street_address1 = '0', 
                            street_address2 = '0', 
                            city = '0', 
                            state_name = 'UNKNOWN', 
                            state_code = '01', 
                            country_name = 'UNKNOWN', 
                            country_code = '01', 
                            zip = '0', 
                            zip4 = '0123', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            latitude = -90, 
                            longitude = -180, )
                        ], 
                    phone_number_array = [
                        unicourt.models.phone.Phone(
                            object = 'Phone', 
                            phone_number = '0', 
                            phone_type = 'DEFAULT', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    email_array = [
                        unicourt.models.email.Email(
                            object = 'Email', 
                            email_id = '0', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                attorney_law_firm_array = [
                    unicourt.models.attorney_law_firm.AttorneyLawFirm(
                        object = 'AttorneyLawFirm', 
                        attorney_law_firm_id = '012345678910111213141516', 
                        name = '0', 
                        is_visible = True, 
                        first_fetch_date = '0123456789101112131415161718192021222324', 
                        last_fetch_date = '0123456789101112131415161718192021222324', )
                    ],
                bar_number = '',
                attorney_type = unicourt.models.attorney_type.AttorneyType(
                    object = 'AttorneyType', 
                    attorney_type_id = '01234567891011121314151617', 
                    name = '0', 
                    created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                source_attorney_type = '',
                is_visible = True,
                first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                party_attorney_associations = unicourt.models.party_attorney_associations.PartyAttorneyAssociations(
                    object = 'PartyAttorneyAssociations', 
                    page_number = 56, 
                    party_attorney_association_array = [
                        unicourt.models.party_attorney_association.PartyAttorneyAssociation(
                            object = 'PartyAttorneyAssociation', 
                            party_attorney_association_id = '01234567891011121314151617', 
                            attorney_id = '01234567891011121314151617', 
                            party_id = '01234567891011121314151617', 
                            is_visible = True, )
                        ], 
                    next_page_api = '', 
                    total_pages = 56, 
                    total_count = 56, ),
                possible_norm_attorney_array = [
                    unicourt.models.possible_norm_attorney.PossibleNormAttorney(
                        object = 'PossibleNormAttorney', 
                        norm_attorney_id = '01234567891011121314151617', 
                        norm_attorney_name = '', 
                        best_match = True, 
                        confidence_score = 1.337, 
                        score_constituents = unicourt.models.possible_norm_attorney_score_constituents.PossibleNormAttorney_scoreConstituents(
                            name_similarity_score = 1.337, 
                            other_potential_norm_attorneys = 56, 
                            bar_id = 'Matched', 
                            address = 'Matched', 
                            email = 'Matched', 
                            phone = 'Matched', 
                            law_firm = 'Matched', ), 
                        norm_attorney_api = '', 
                        associated_norm_judges_api = '', 
                        associated_norm_law_firms_api = '', 
                        associated_norm_parties_api = '', 
                        case_count_analytics_by_norm_attorney_api = '', 
                        case_count_analytics_by_opposing_norm_attorney_api = '', )
                    ],
                possible_norm_law_firm_array = [
                    unicourt.models.possible_norm_law_firm.PossibleNormLawFirm(
                        object = 'PossibleNormLawFirm', 
                        norm_law_firm_id = '01234567891011121314151617', 
                        norm_law_firm_name = '', 
                        best_match = True, 
                        source_details = unicourt.models.possible_norm_law_firm_source_details.PossibleNormLawFirm_sourceDetails(
                            source = 'Case_Attorney_Linked_In_Other_Cases', 
                            linked_norm_attorney_id_array = [
                                '01234567891011121314151617'
                                ], ), 
                        confidence_score = 1.337, 
                        score_constituents = unicourt.models.possible_norm_law_firm_score_constituents.PossibleNormLawFirm_scoreConstituents(
                            name_similarity_score = 1.337, 
                            other_potential_norm_law_firms = 56, 
                            secretary_of_state_id = 'Matched', 
                            address = 'Matched', 
                            email = 'Matched', 
                            phone = 'Matched', ), 
                        norm_law_firm_api = '', 
                        associated_norm_attorney_api = '', 
                        associated_norm_judge_api = '', 
                        associated_norm_parties_api = '', 
                        case_count_analytics_by_norm_law_firm_api = '', 
                        case_count_analytics_by_opposing_norm_law_firm_api = '', )
                    ],
                party_role_group_id_array = [
                    '01234567891011121314151617'
                    ],
                party_role_id_array = [
                    '01234567891011121314151617'
                    ]
            )
        else:
            return Attorney(
                object = 'Attorney',
                attorney_id = '01234567891011121314151617',
                name = '0',
                name_prefix = '',
                first_name = '',
                middle_name = '',
                last_name = '',
                name_suffix = '',
                contact = unicourt.models.contact.Contact(
                    object = 'Contact', 
                    address_array = [
                        unicourt.models.address.Address(
                            object = 'Address', 
                            street_address1 = '0', 
                            street_address2 = '0', 
                            city = '0', 
                            state_name = 'UNKNOWN', 
                            state_code = '01', 
                            country_name = 'UNKNOWN', 
                            country_code = '01', 
                            zip = '0', 
                            zip4 = '0123', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            latitude = -90, 
                            longitude = -180, )
                        ], 
                    phone_number_array = [
                        unicourt.models.phone.Phone(
                            object = 'Phone', 
                            phone_number = '0', 
                            phone_type = 'DEFAULT', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    email_array = [
                        unicourt.models.email.Email(
                            object = 'Email', 
                            email_id = '0', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                attorney_law_firm_array = [
                    unicourt.models.attorney_law_firm.AttorneyLawFirm(
                        object = 'AttorneyLawFirm', 
                        attorney_law_firm_id = '012345678910111213141516', 
                        name = '0', 
                        is_visible = True, 
                        first_fetch_date = '0123456789101112131415161718192021222324', 
                        last_fetch_date = '0123456789101112131415161718192021222324', )
                    ],
                bar_number = '',
                attorney_type = unicourt.models.attorney_type.AttorneyType(
                    object = 'AttorneyType', 
                    attorney_type_id = '01234567891011121314151617', 
                    name = '0', 
                    created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                source_attorney_type = '',
                is_visible = True,
                first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                party_attorney_associations = unicourt.models.party_attorney_associations.PartyAttorneyAssociations(
                    object = 'PartyAttorneyAssociations', 
                    page_number = 56, 
                    party_attorney_association_array = [
                        unicourt.models.party_attorney_association.PartyAttorneyAssociation(
                            object = 'PartyAttorneyAssociation', 
                            party_attorney_association_id = '01234567891011121314151617', 
                            attorney_id = '01234567891011121314151617', 
                            party_id = '01234567891011121314151617', 
                            is_visible = True, )
                        ], 
                    next_page_api = '', 
                    total_pages = 56, 
                    total_count = 56, ),
                possible_norm_attorney_array = [
                    unicourt.models.possible_norm_attorney.PossibleNormAttorney(
                        object = 'PossibleNormAttorney', 
                        norm_attorney_id = '01234567891011121314151617', 
                        norm_attorney_name = '', 
                        best_match = True, 
                        confidence_score = 1.337, 
                        score_constituents = unicourt.models.possible_norm_attorney_score_constituents.PossibleNormAttorney_scoreConstituents(
                            name_similarity_score = 1.337, 
                            other_potential_norm_attorneys = 56, 
                            bar_id = 'Matched', 
                            address = 'Matched', 
                            email = 'Matched', 
                            phone = 'Matched', 
                            law_firm = 'Matched', ), 
                        norm_attorney_api = '', 
                        associated_norm_judges_api = '', 
                        associated_norm_law_firms_api = '', 
                        associated_norm_parties_api = '', 
                        case_count_analytics_by_norm_attorney_api = '', 
                        case_count_analytics_by_opposing_norm_attorney_api = '', )
                    ],
                possible_norm_law_firm_array = [
                    unicourt.models.possible_norm_law_firm.PossibleNormLawFirm(
                        object = 'PossibleNormLawFirm', 
                        norm_law_firm_id = '01234567891011121314151617', 
                        norm_law_firm_name = '', 
                        best_match = True, 
                        source_details = unicourt.models.possible_norm_law_firm_source_details.PossibleNormLawFirm_sourceDetails(
                            source = 'Case_Attorney_Linked_In_Other_Cases', 
                            linked_norm_attorney_id_array = [
                                '01234567891011121314151617'
                                ], ), 
                        confidence_score = 1.337, 
                        score_constituents = unicourt.models.possible_norm_law_firm_score_constituents.PossibleNormLawFirm_scoreConstituents(
                            name_similarity_score = 1.337, 
                            other_potential_norm_law_firms = 56, 
                            secretary_of_state_id = 'Matched', 
                            address = 'Matched', 
                            email = 'Matched', 
                            phone = 'Matched', ), 
                        norm_law_firm_api = '', 
                        associated_norm_attorney_api = '', 
                        associated_norm_judge_api = '', 
                        associated_norm_parties_api = '', 
                        case_count_analytics_by_norm_law_firm_api = '', 
                        case_count_analytics_by_opposing_norm_law_firm_api = '', )
                    ],
                party_role_group_id_array = [
                    '01234567891011121314151617'
                    ],
                party_role_id_array = [
                    '01234567891011121314151617'
                    ],
        )
        """

    def testAttorney(self):
        """Test Attorney"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
