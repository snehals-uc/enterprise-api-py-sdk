# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/developers/enterpriseapi/api/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from unicourt.models.party import Party

class TestParty(unittest.TestCase):
    """Party unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Party:
        """Test Party
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Party`
        """
        model = Party()
        if include_optional:
            return Party(
                object = 'Party',
                party_id = '01234567891011121314151617',
                name = '0',
                name_prefix = '',
                first_name = '',
                middle_name = '',
                last_name = '',
                name_suffix = '',
                contact = unicourt.models.contact.Contact(
                    object = 'Contact', 
                    address_array = [
                        unicourt.models.address.Address(
                            object = 'Address', 
                            street_address1 = '0', 
                            street_address2 = '0', 
                            city = '0', 
                            state_name = 'UNKNOWN', 
                            state_code = '01', 
                            country_name = 'UNKNOWN', 
                            country_code = '01', 
                            zip = '0', 
                            zip4 = '0123', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            latitude = -90, 
                            longitude = -180, )
                        ], 
                    phone_number_array = [
                        unicourt.models.phone.Phone(
                            object = 'Phone', 
                            phone_number = '0', 
                            phone_type = 'DEFAULT', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    email_array = [
                        unicourt.models.email.Email(
                            object = 'Email', 
                            email_id = '0', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                party_classification_type = 'INDIVIDUAL',
                party_role = unicourt.models.party_role.PartyRole(
                    object = 'PartyRole', 
                    party_role_id = '01234567891011121314151617', 
                    party_role_group_id = '01234567891011121314151617', 
                    party_role_group = '0', 
                    name = '0', 
                    description = '0', 
                    created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                source_party_role = '',
                is_visible = True,
                first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                attorney_representation_type = unicourt.models.attorney_representation_type.AttorneyRepresentationType(
                    object = 'AttorneyRepresentationType', 
                    attorney_representation_type_id = '01234567891011121314151617', 
                    name = '0', 
                    created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                party_attorney_associations = unicourt.models.party_attorney_associations.PartyAttorneyAssociations(
                    object = 'PartyAttorneyAssociations', 
                    page_number = 56, 
                    party_attorney_association_array = [
                        unicourt.models.party_attorney_association.PartyAttorneyAssociation(
                            object = 'PartyAttorneyAssociation', 
                            party_attorney_association_id = '01234567891011121314151617', 
                            attorney_id = '01234567891011121314151617', 
                            party_id = '01234567891011121314151617', 
                            is_visible = True, )
                        ], 
                    next_page_api = '', 
                    total_pages = 56, 
                    total_count = 56, ),
                possible_norm_party_array = [
                    unicourt.models.possible_norm_party.PossibleNormParty(
                        object = 'PossibleNormParty', 
                        norm_party_id = '01234567891011121314151617', 
                        norm_party_name = '', 
                        best_match = True, 
                        confidence_score = 1.337, 
                        score_constituents = unicourt.models.possible_norm_party_score_constituents.PossibleNormParty_scoreConstituents(
                            name_similarity_score = 1.337, 
                            other_potential_norm_parties = 56, 
                            secretary_of_state_id = 'Matched', 
                            address = 'Matched', 
                            email = 'Matched', 
                            phone = 'Matched', ), 
                        norm_party_api = '', 
                        associated_norm_attorneys_api = '', 
                        associated_norm_law_firms_api = '', 
                        associated_norm_judges_api = '', 
                        case_count_analytics_by_norm_party_api = '', 
                        case_count_analytics_by_opposing_norm_party_api = '', )
                    ]
            )
        else:
            return Party(
                object = 'Party',
                party_id = '01234567891011121314151617',
                name = '0',
                name_prefix = '',
                first_name = '',
                middle_name = '',
                last_name = '',
                name_suffix = '',
                contact = unicourt.models.contact.Contact(
                    object = 'Contact', 
                    address_array = [
                        unicourt.models.address.Address(
                            object = 'Address', 
                            street_address1 = '0', 
                            street_address2 = '0', 
                            city = '0', 
                            state_name = 'UNKNOWN', 
                            state_code = '01', 
                            country_name = 'UNKNOWN', 
                            country_code = '01', 
                            zip = '0', 
                            zip4 = '0123', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            latitude = -90, 
                            longitude = -180, )
                        ], 
                    phone_number_array = [
                        unicourt.models.phone.Phone(
                            object = 'Phone', 
                            phone_number = '0', 
                            phone_type = 'DEFAULT', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    email_array = [
                        unicourt.models.email.Email(
                            object = 'Email', 
                            email_id = '0', 
                            is_visible = True, 
                            first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], ),
                party_classification_type = 'INDIVIDUAL',
                party_role = unicourt.models.party_role.PartyRole(
                    object = 'PartyRole', 
                    party_role_id = '01234567891011121314151617', 
                    party_role_group_id = '01234567891011121314151617', 
                    party_role_group = '0', 
                    name = '0', 
                    description = '0', 
                    created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                source_party_role = '',
                is_visible = True,
                first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                attorney_representation_type = unicourt.models.attorney_representation_type.AttorneyRepresentationType(
                    object = 'AttorneyRepresentationType', 
                    attorney_representation_type_id = '01234567891011121314151617', 
                    name = '0', 
                    created_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                party_attorney_associations = unicourt.models.party_attorney_associations.PartyAttorneyAssociations(
                    object = 'PartyAttorneyAssociations', 
                    page_number = 56, 
                    party_attorney_association_array = [
                        unicourt.models.party_attorney_association.PartyAttorneyAssociation(
                            object = 'PartyAttorneyAssociation', 
                            party_attorney_association_id = '01234567891011121314151617', 
                            attorney_id = '01234567891011121314151617', 
                            party_id = '01234567891011121314151617', 
                            is_visible = True, )
                        ], 
                    next_page_api = '', 
                    total_pages = 56, 
                    total_count = 56, ),
                possible_norm_party_array = [
                    unicourt.models.possible_norm_party.PossibleNormParty(
                        object = 'PossibleNormParty', 
                        norm_party_id = '01234567891011121314151617', 
                        norm_party_name = '', 
                        best_match = True, 
                        confidence_score = 1.337, 
                        score_constituents = unicourt.models.possible_norm_party_score_constituents.PossibleNormParty_scoreConstituents(
                            name_similarity_score = 1.337, 
                            other_potential_norm_parties = 56, 
                            secretary_of_state_id = 'Matched', 
                            address = 'Matched', 
                            email = 'Matched', 
                            phone = 'Matched', ), 
                        norm_party_api = '', 
                        associated_norm_attorneys_api = '', 
                        associated_norm_law_firms_api = '', 
                        associated_norm_judges_api = '', 
                        case_count_analytics_by_norm_party_api = '', 
                        case_count_analytics_by_opposing_norm_party_api = '', )
                    ],
        )
        """

    def testParty(self):
        """Test Party"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
