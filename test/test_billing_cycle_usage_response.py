# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/developers/enterpriseapi/api/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from unicourt.models.billing_cycle_usage_response import BillingCycleUsageResponse

class TestBillingCycleUsageResponse(unittest.TestCase):
    """BillingCycleUsageResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BillingCycleUsageResponse:
        """Test BillingCycleUsageResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BillingCycleUsageResponse`
        """
        model = BillingCycleUsageResponse()
        if include_optional:
            return BillingCycleUsageResponse(
                object = 'BillingCycleUsageResponse',
                billing_cycle = unicourt.models.billing_cycle_usage_response_billing_cycle.BillingCycleUsageResponse_billingCycle(
                    start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                days = None,
                api_usage = None,
                api_calls_made = unicourt.models.billing_cycle_usage_response_api_calls_made.BillingCycleUsageResponse_apiCallsMade(
                    count = 56, 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                api_calls_credited = unicourt.models.billing_cycle_usage_response_api_calls_credited.BillingCycleUsageResponse_apiCallsCredited(
                    count = 56, 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                api_calls_billable = unicourt.models.billing_cycle_usage_response_api_calls_billable.BillingCycleUsageResponse_apiCallsBillable(
                    count = 56, 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                total_cases_tracked = 56
            )
        else:
            return BillingCycleUsageResponse(
                object = 'BillingCycleUsageResponse',
                billing_cycle = unicourt.models.billing_cycle_usage_response_billing_cycle.BillingCycleUsageResponse_billingCycle(
                    start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                days = None,
                api_usage = None,
                api_calls_made = unicourt.models.billing_cycle_usage_response_api_calls_made.BillingCycleUsageResponse_apiCallsMade(
                    count = 56, 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                api_calls_credited = unicourt.models.billing_cycle_usage_response_api_calls_credited.BillingCycleUsageResponse_apiCallsCredited(
                    count = 56, 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                api_calls_billable = unicourt.models.billing_cycle_usage_response_api_calls_billable.BillingCycleUsageResponse_apiCallsBillable(
                    count = 56, 
                    last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                total_cases_tracked = 56,
        )
        """

    def testBillingCycleUsageResponse(self):
        """Test BillingCycleUsageResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
