# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/developers/enterpriseapi/api/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from unicourt.models.norm_party_search_response import NormPartySearchResponse

class TestNormPartySearchResponse(unittest.TestCase):
    """NormPartySearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NormPartySearchResponse:
        """Test NormPartySearchResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NormPartySearchResponse`
        """
        model = NormPartySearchResponse()
        if include_optional:
            return NormPartySearchResponse(
                object = 'NormPartySearchResponse',
                norm_party_search_result_array = [
                    unicourt.models.norm_party_search_result.NormPartySearchResult(
                        object = 'NormPartySearchResult', 
                        norm_party_id = '012345678910111213141516', 
                        name = '0', 
                        party_classification_type = '0', 
                        first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        norm_party_details_api = '0', 
                        matched_object_array = [
                            unicourt.models.matched_object.MatchedObject(
                                object = 'MatchedObject', 
                                matched_object_id = '012345678910111213141516', 
                                matched_object_name = '0', 
                                matched_object_attribute = '0', 
                                highlight_snippet = '0', 
                                matched_object_api = '0', )
                            ], )
                    ],
                q = '012',
                norm_party_search_id = '01234567891011121314151617',
                next_page_api = '0',
                previous_page_api = '0',
                page_number = 1,
                total_pages = 1,
                total_count = 1
            )
        else:
            return NormPartySearchResponse(
                object = 'NormPartySearchResponse',
                norm_party_search_result_array = [
                    unicourt.models.norm_party_search_result.NormPartySearchResult(
                        object = 'NormPartySearchResult', 
                        norm_party_id = '012345678910111213141516', 
                        name = '0', 
                        party_classification_type = '0', 
                        first_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_fetch_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        norm_party_details_api = '0', 
                        matched_object_array = [
                            unicourt.models.matched_object.MatchedObject(
                                object = 'MatchedObject', 
                                matched_object_id = '012345678910111213141516', 
                                matched_object_name = '0', 
                                matched_object_attribute = '0', 
                                highlight_snippet = '0', 
                                matched_object_api = '0', )
                            ], )
                    ],
                q = '012',
                norm_party_search_id = '01234567891011121314151617',
                next_page_api = '0',
                previous_page_api = '0',
                page_number = 1,
                total_pages = 1,
                total_count = 1,
        )
        """

    def testNormPartySearchResponse(self):
        """Test NormPartySearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
